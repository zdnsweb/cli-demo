// Code generated by openapi-cli-generator. DO NOT EDIT.
// See https://github.com/danielgtaylor/openapi-cli-generator

package cmd

import (
	"fmt"

	"github.com/danielgtaylor/openapi-cli-generator/cli"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"gopkg.in/h2non/gentleman.v2"
)

var viewSubcommand bool

func viewServers() []map[string]string {
	return []map[string]string{

		map[string]string{
			"description": "",
			"url":         "http://localhost:8088",
		},
	}
}

// ViewDeleteView Delete View
func ViewDeleteView(paramIds string, params *viper.Viper) (*gentleman.Response, interface{}, error) {
	handlerPath := "deleteview"
	if viewSubcommand {
		handlerPath = "view " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = viewServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/views"

	req := cli.Client.Delete().URL(url)

	req = req.AddQuery("ids", paramIds)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

// ViewListViews List Views
func ViewListViews(params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "listviews"
	if viewSubcommand {
		handlerPath = "view " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = viewServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/views"

	req := cli.Client.Get().URL(url)

	paramTotalSize := params.GetInt64("total-size")
	if paramTotalSize != 0 {
		req = req.AddQuery("total_size", fmt.Sprintf("%v", paramTotalSize))
	}
	paramPageNum := params.GetInt64("page-num")
	if paramPageNum != 0 {
		req = req.AddQuery("page_num", fmt.Sprintf("%v", paramPageNum))
	}
	paramPageSize := params.GetInt64("page-size")
	if paramPageSize != 0 {
		req = req.AddQuery("page_size", fmt.Sprintf("%v", paramPageSize))
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ViewCreateView Create View
func ViewCreateView(params *viper.Viper, body string) (*gentleman.Response, interface{}, error) {
	handlerPath := "createview"
	if viewSubcommand {
		handlerPath = "view " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = viewServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/views"

	req := cli.Client.Post().URL(url)

	if body != "" {
		req = req.AddHeader("Content-Type", "application/json").BodyString(body)
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

func viewRegister(subcommand bool) {
	root := cli.Root

	if subcommand {
		root = &cobra.Command{
			Use:   "view",
			Short: "Simple Inventory API",
			Long:  cli.Markdown("This is a simple API"),
		}
		viewSubcommand = true
	} else {
		cli.Root.Short = "Simple Inventory API"
		cli.Root.Long = cli.Markdown("This is a simple API")
	}

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "deleteview ids",
			Short:   "Delete View",
			Long:    cli.Markdown("delete view"),
			Example: examples,
			Args:    cobra.MinimumNArgs(1),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ViewDeleteView(args[0], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "listviews",
			Short:   "List Views",
			Long:    cli.Markdown("list views"),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ViewListViews(params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cmd.Flags().Int64("total-size", 0, "collection total amount")
		cmd.Flags().Int64("page-num", 0, "collection total amount")
		cmd.Flags().Int64("page-size", 0, "collection total amount")

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "createview",
			Short:   "Create View",
			Long:    cli.Markdown("create view\n## Request Schema (application/json)\n\nproperties:\n  acls:\n    items:\n      type: string\n    type: array\n  allow_recursive:\n    type: string\n  backup_query_sources:\n    items:\n      type: string\n    type: array\n  bind_ips:\n    items:\n      type: string\n    type: array\n  black_acls:\n    items:\n      type: string\n    type: array\n  comment:\n    type: string\n  dns64s:\n    items:\n      type: string\n    type: array\n  ecs_exact_match:\n    type: string\n  ecs_recurse_domains:\n    items:\n      type: string\n    type: array\n  fail_forwarder:\n    type: string\n  filter_aaaa:\n    type: string\n  filter_aaaa_exempt:\n    items:\n      type: string\n    type: array\n  filter_aaaa_ips:\n    items:\n      type: string\n    type: array\n  forward_zones:\n    items:\n      type: string\n    type: array\n  href:\n    type: string\n  id:\n    type: string\n  limit_ips:\n    items:\n      type: string\n    type: array\n  name:\n    type: string\n  need_tsig_key:\n    type: string\n  non_recursive_acls:\n    items:\n      type: string\n    type: array\n  owners:\n    items:\n      type: string\n    type: array\n  priority:\n    type: integer\n  query_source:\n    type: string\n  recursion_enable:\n    type: string\n  recursive_acls:\n    items:\n      type: string\n    type: array\n  state:\n    type: string\n  stub_zones:\n    items:\n      type: string\n    type: array\n  try_final_after_forward:\n    type: string\n  tsig_algorithm:\n    type: string\n  tsig_host:\n    items:\n      type: string\n    type: array\n  tsig_name:\n    type: string\n  tsig_secret:\n    type: string\n  working_query_source:\n    type: string\n  zones:\n    items:\n      type: string\n    type: array\ntype: object\n"),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {
				body, err := cli.GetBody("application/json", args[0:])
				if err != nil {
					log.Fatal().Err(err).Msg("Unable to get body")
				}

				_, decoded, err := ViewCreateView(params, body)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

}
